"use strict";
///<reference types="./Libraries/FudgeCore.js"/>
///<reference types="./Libraries/oimo.min.js"/>
var FudgePhysics_Communication;
///<reference types="./Libraries/FudgeCore.js"/>
///<reference types="./Libraries/oimo.min.js"/>
(function (FudgePhysics_Communication) {
    var f = FudgeCore;
    window.addEventListener("load", init);
    const app = document.querySelector("canvas");
    let viewPort;
    let hierarchy;
    let fps;
    const times = [];
    let cubes = new Array();
    let fpsDisplay = document.querySelector("h2#FPS");
    let bodies = new Array();
    let world = new OIMO.World({
        timestep: 1 / 60,
        iterations: 8,
        broadphase: 2,
        worldscale: 1,
        random: true,
        info: false,
        gravity: [0, -9.8, 0]
    });
    function init(_event) {
        f.Debug.log(app);
        f.RenderManager.initialize();
        hierarchy = new f.Node("Scene");
        let ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube());
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.local.scale(new f.Vector3(10, 0.3, 10));
        hierarchy.appendChild(ground);
        cubes[0] = createCompleteMeshNode("Cube_1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform = cubes[0].getComponent(f.ComponentTransform);
        cmpCubeTransform.local.translate(new f.Vector3(0, 2, 0));
        cmpCubeTransform.local.rotateX(45, true);
        let cmpCubeMesh = cubes[0].getComponent(f.ComponentMesh);
        cmpCubeMesh.pivot.rotateX(45, true);
        hierarchy.appendChild(cubes[0]);
        cubes[1] = createCompleteMeshNode("Cube_2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform2 = cubes[1].getComponent(f.ComponentTransform);
        cmpCubeTransform2.local.translate(new f.Vector3(0, 3.5, 0.4));
        hierarchy.appendChild(cubes[1]);
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        let cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(2, 2, 10));
        cmpCamera.pivot.lookAt(f.Vector3.ZERO());
        //Physics OIMO
        initializePhysicsBody(ground.getComponent(f.ComponentTransform), false, 0);
        initializePhysicsBody(cmpCubeTransform, true, 1);
        initializePhysicsBody(cmpCubeTransform2, true, 2);
        //EndPhysics
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Loop.start();
    }
    function update() {
        //Physics OIMO
        world.step();
        applyPhysicsBody(cubes[0].getComponent(f.ComponentTransform), 1);
        //applyPhysicsBody(cubes[1].getComponent(f.ComponentTransform), 2);
        //EndPhysics
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(() => {
            const now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function initializePhysicsBody(_cmpTransform, dynamic, no) {
        bodies[no] = world.add({
            type: "box",
            size: [_cmpTransform.local.scaling.x, _cmpTransform.local.scaling.y, _cmpTransform.local.scaling.z],
            pos: [_cmpTransform.local.translation.x, _cmpTransform.local.translation.y, _cmpTransform.local.translation.z],
            rot: [_cmpTransform.local.rotation.x, _cmpTransform.local.rotation.y, _cmpTransform.local.rotation.z],
            move: dynamic,
            density: 1,
            friction: 0.2,
            restitution: 0.2,
            belongsTo: 1,
            collidesWith: 0xffffffff // The bits of the collision groups with which the shape collides.
        });
    }
    function applyPhysicsBody(_cmpTransform, no) {
        let tmpPosition = new f.Vector3(bodies[no].getPosition().x, bodies[no].getPosition().y, bodies[no].getPosition().z);
        let tmpRotation; //= makeRotationFromQuaternion(bodies[no].getQuaternion()); //, new f.Vector3(0, 0, 1)); //f.Vector3.ONE(1)); //_cmpTransform.local.rotation);
        tmpRotation = transformVectorByQuaternion(_cmpTransform.local.rotation, bodies[no].getQuaternion());
        let tmpMatrix = f.Matrix4x4.TRANSLATION(tmpPosition);
        let tmpRotMatrix = new f.Matrix4x4();
        // f.Debug.log(tmpRotation.x);
        tmpRotMatrix.rotateX(tmpRotation.x);
        tmpRotMatrix.rotateY(tmpRotation.y);
        tmpRotMatrix.rotateZ(tmpRotation.z);
        // f.Debug.log(tmpRotMatrix);
        tmpMatrix.multiply(tmpRotMatrix);
        _cmpTransform.local.set(tmpMatrix);
        //_cmpTransform.local.rotate(tmpRotation, false);
        //let cmpMesh: f.ComponentMesh = _cmpTransform.getContainer().getComponent(f.ComponentMesh);
        //cmpMesh.pivot.rotation.set(tmpRotation.x, tmpRotation.y, tmpRotation.z);
        //f.Debug.log(tmpRotation);
    }
    function makeRotationFromQuaternion(q, targetAxis = new f.Vector3(1, 1, 1)) {
        let angles = new f.Vector3();
        // roll (x-axis rotation)
        let sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
        let cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
        angles.x = Math.atan2(sinr_cosp, cosr_cosp);
        // pitch (y-axis rotation)
        let sinp = 2 * (q.w * q.y - q.z * q.x);
        if (Math.abs(sinp) >= 1)
            angles.y = copysign(Math.PI / 2, sinp); // use 90 degrees if out of range
        else
            angles.y = Math.asin(sinp);
        // yaw (z-axis rotation)
        let siny_cosp = 2 * (q.w * q.z + q.x * q.y);
        let cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
        angles.z = Math.atan2(siny_cosp, cosy_cosp);
        return angles;
    }
    function transformVectorByQuaternion(value, rotation) {
        let angles;
        let x2 = rotation.x + rotation.x;
        let y2 = rotation.y + rotation.y;
        let z2 = rotation.z + rotation.z;
        let wx2 = rotation.w * x2;
        let wy2 = rotation.w * y2;
        let wz2 = rotation.w * z2;
        let xx2 = rotation.x * x2;
        let xy2 = rotation.x * y2;
        let xz2 = rotation.x * z2;
        let yy2 = rotation.y * y2;
        let yz2 = rotation.y * z2;
        let zz2 = rotation.z * z2;
        angles = new f.Vector3(value.x * (1.0 - yy2 - zz2) + value.y * (xy2 - wz2) + value.z * (xz2 + wy2), value.x * (xy2 + wz2) + value.y * (1.0 - xx2 - zz2) + value.z * (yz2 - wx2), value.x * (xz2 - wy2) + value.y * (yz2 + wx2) + value.z * (1.0 - xx2 - yy2));
        f.Debug.log(angles);
        return angles;
    }
    function copysign(a, b) {
        return b < 0 ? -Math.abs(a) : Math.abs(a);
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGdEQUFnRDtBQUNoRCwrQ0FBK0M7QUFFL0MsSUFBVSwwQkFBMEIsQ0EwTW5DO0FBN01ELGdEQUFnRDtBQUNoRCwrQ0FBK0M7QUFFL0MsV0FBVSwwQkFBMEI7SUFDaEMsSUFBTyxDQUFDLEdBQUcsU0FBUyxDQUFDO0lBRXJCLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEMsTUFBTSxHQUFHLEdBQXNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDaEUsSUFBSSxRQUFvQixDQUFDO0lBQ3pCLElBQUksU0FBaUIsQ0FBQztJQUN0QixJQUFJLEdBQVcsQ0FBQztJQUNoQixNQUFNLEtBQUssR0FBYSxFQUFFLENBQUM7SUFDM0IsSUFBSSxLQUFLLEdBQWEsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUNsQyxJQUFJLFVBQVUsR0FBZ0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvRCxJQUFJLE1BQU0sR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO0lBRXpCLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQztRQUN6QixRQUFRLEVBQUUsQ0FBQyxHQUFHLEVBQUU7UUFDaEIsVUFBVSxFQUFFLENBQUM7UUFDYixVQUFVLEVBQUUsQ0FBQztRQUNiLFVBQVUsRUFBRSxDQUFDO1FBQ2IsTUFBTSxFQUFFLElBQUk7UUFDWixJQUFJLEVBQUUsS0FBSztRQUNYLE9BQU8sRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDdEIsQ0FBQyxDQUFDO0lBR0gsU0FBUyxJQUFJLENBQUMsTUFBYTtRQUN6QixDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixDQUFDLENB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cmNlc0NvbnRlbnQiOlsiLy8vPHJlZmVyZW5jZSB0eXBlcz1cIi4vTGlicmFyaWVzL0Z1ZGdlQ29yZS5qc1wiLz5cclxuLy8vPHJlZmVyZW5jZSB0eXBlcz1cIi4vTGlicmFyaWVzL29pbW8ubWluLmpzXCIvPlxyXG5cclxubmFtZXNwYWNlIEZ1ZGdlUGh5c2ljc19Db21tdW5pY2F0aW9uIHtcclxuICAgIGltcG9ydCBmID0gRnVkZ2VDb3JlO1xyXG4gICAgXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaW5pdCk7XHJcbiAgICBjb25zdCBhcHA6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcclxuICAgIGxldCB2aWV3UG9ydDogZi5WaWV3cG9ydDtcclxuICAgIGxldCBoaWVyYXJjaHk6IGYuTm9kZTtcclxuICAgIGxldCBmcHM6IG51bWJlcjtcclxuICAgIGNvbnN0IHRpbWVzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgbGV0IGN1YmVzOiBmLk5vZGVbXSA9IG5ldyBBcnJheSgpO1xyXG4gICAgbGV0IGZwc0Rpc3BsYXk6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImgyI0ZQU1wiKTtcclxuICAgIGxldCBib2RpZXMgPSBuZXcgQXJyYXkoKTtcclxuXHJcbiAgICBsZXQgd29ybGQgPSBuZXcgT0lNTy5Xb3JsZCh7IFxyXG4gICAgICB0aW1lc3RlcDogMSAvIDYwLCBcclxuICAgICAgaXRlcmF0aW9uczogOCwgXHJcbiAgICAgIGJyb2FkcGhhc2U6IDIsIC8vIDEgYnJ1dGUgZm9yY2UsIDIgc3dlZXAgYW5kIHBydW5lLCAzIHZvbHVtZSB0cmVlXHJcbiAgICAgIHdvcmxkc2NhbGU6IDEsIC8vIHNjYWxlIGZ1bGwgd29ybGQgXHJcbiAgICAgIHJhbmRvbTogdHJ1ZSwgIC8vIHJhbmRvbWl6ZSBzYW1wbGVcclxuICAgICAgaW5mbzogZmFsc2UsICAgLy8gY2FsY3VsYXRlIHN0YXRpc3RpYyBvciBub3RcclxuICAgICAgZ3Jhdml0eTogWzAsIC05LjgsIDBdIFxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXQoX2V2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgICBmLkRlYnVnLmxvZyhhcHApO1xyXG4gICAgICBmLlJlbmRlck1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICBoaWVyYXJjaHkgPSBuZXcgZi5Ob2RlKFwiU2NlbmVcIik7XHJcbiAgICAgXHJcbiAgICAgIGxldCBncm91bmQ6IGYuTm9kZSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJHcm91bmRcIiwgbmV3IGYuTWF0ZXJpYWwoXCJHcm91bmRcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjIsIDAuMiAsIDAuMiwgMSkpKSwgbmV3IGYuTWVzaEN1YmUoKSk7XHJcbiAgICAgIGxldCBjbXBHcm91bmRNZXNoOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IGdyb3VuZC5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gIFxyXG4gICAgICBjbXBHcm91bmRNZXNoLmxvY2FsLnNjYWxlKG5ldyBmLlZlY3RvcjMoMTAsIDAuMywgMTApKTtcclxuICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGdyb3VuZCk7XHJcblxyXG4gICAgICBjdWJlc1swXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlXzFcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMSwgMCAsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCkpO1xyXG4gICAgICBsZXQgY21wQ3ViZVRyYW5zZm9ybTogZi5Db21wb25lbnRUcmFuc2Zvcm0gPSBjdWJlc1swXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gICAgICBjbXBDdWJlVHJhbnNmb3JtLmxvY2FsLnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDAsIDIsIDApKTtcclxuICAgICAgY21wQ3ViZVRyYW5zZm9ybS5sb2NhbC5yb3RhdGVYKDQ1LCB0cnVlKTtcclxuICAgICAgbGV0IGNtcEN1YmVNZXNoOiBmLkNvbXBvbmVudE1lc2ggPSBjdWJlc1swXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRNZXNoKTtcclxuICAgICAgY21wQ3ViZU1lc2gucGl2b3Qucm90YXRlWCg0NSwgdHJ1ZSk7XHJcbiAgICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChjdWJlc1swXSk7XHJcblxyXG4gICAgICBjdWJlc1sxXSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJDdWJlXzJcIiwgbmV3IGYuTWF0ZXJpYWwoXCJDdWJlXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMSwgMCAsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCkpO1xyXG4gICAgICBsZXQgY21wQ3ViZVRyYW5zZm9ybTI6IGYuQ29tcG9uZW50VHJhbnNmb3JtID0gY3ViZXNbMV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50VHJhbnNmb3JtKTtcclxuICAgICAgY21wQ3ViZVRyYW5zZm9ybTIubG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgMy41LCAwLjQpKTtcclxuICAgICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGN1YmVzWzFdKTtcclxuXHJcbiAgICAgIGxldCBjbXBMaWdodDogZi5Db21wb25lbnRMaWdodCA9IG5ldyBmLkNvbXBvbmVudExpZ2h0KG5ldyBmLkxpZ2h0RGlyZWN0aW9uYWwoZi5Db2xvci5DU1MoXCJXSElURVwiKSkpO1xyXG4gICAgICBjbXBMaWdodC5waXZvdC5sb29rQXQobmV3IGYuVmVjdG9yMygwLjUsIC0xLCAtMC44KSk7XHJcbiAgICAgIGhpZXJhcmNoeS5hZGRDb21wb25lbnQoY21wTGlnaHQpO1xyXG5cclxuICAgICAgbGV0IGNtcENhbWVyYTogZi5Db21wb25lbnRDYW1lcmEgPSBuZXcgZi5Db21wb25lbnRDYW1lcmEoKTtcclxuICAgICAgY21wQ2FtZXJhLmJhY2tncm91bmRDb2xvciA9IGYuQ29sb3IuQ1NTKFwiR1JFWVwiKTtcclxuICAgICAgY21wQ2FtZXJhLnBpdm90LnRyYW5zbGF0ZShuZXcgZi5WZWN0b3IzKDIsIDIsIDEwKSk7XHJcbiAgICAgIGNtcENhbWVyYS5waXZvdC5sb29rQXQoZi5WZWN0b3IzLlpFUk8oKSk7XHJcblxyXG4gICAgICAvL1BoeXNpY3MgT0lNT1xyXG4gICAgICBpbml0aWFsaXplUGh5c2ljc0JvZHkoZ3JvdW5kLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSksIGZhbHNlLCAwKTtcclxuICAgICAgaW5pdGlhbGl6ZVBoeXNpY3NCb2R5KGNtcEN1YmVUcmFuc2Zvcm0sIHRydWUsIDEpO1xyXG4gICAgICBpbml0aWFsaXplUGh5c2ljc0JvZHkoY21wQ3ViZVRyYW5zZm9ybTIsIHRydWUsIDIpO1xyXG4gICAgICAvL0VuZFBoeXNpY3NcclxuXHJcbiAgICAgIHZpZXdQb3J0ID0gbmV3IGYuVmlld3BvcnQoKTtcclxuICAgICAgdmlld1BvcnQuaW5pdGlhbGl6ZShcIlZpZXdwb3J0XCIsIGhpZXJhcmNoeSwgY21wQ2FtZXJhLCBhcHApO1xyXG5cclxuICAgICAgdmlld1BvcnQuc2hvd1NjZW5lR3JhcGgoKTtcclxuXHJcbiAgICAgIGYuTG9vcC5hZGRFdmVudExpc3RlbmVyKGYuRVZFTlQuTE9PUF9GUkFNRSwgdXBkYXRlKTtcclxuICAgICAgZi5Mb29wLnN0YXJ0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdXBkYXRlKCk6IHZvaWQge1xyXG4gICAgICBcclxuICAgICAgLy9QaHlzaWNzIE9JTU9cclxuICAgICAgd29ybGQuc3RlcCgpO1xyXG4gICAgICBhcHBseVBoeXNpY3NCb2R5KGN1YmVzWzBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSksIDEpO1xyXG4gICAgICAvL2FwcGx5UGh5c2ljc0JvZHkoY3ViZXNbMV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50VHJhbnNmb3JtKSwgMik7XHJcbiAgICAgIC8vRW5kUGh5c2ljc1xyXG5cclxuICAgICAgdmlld1BvcnQuZHJhdygpO1xyXG4gICAgICBtZWFzdXJlRlBTKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gbWVhc3VyZUZQUygpOiB2b2lkIHtcclxuICAgICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcclxuICAgICAgICAgICAgY29uc3Qgbm93ID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICAgICAgICAgIHdoaWxlICh0aW1lcy5sZW5ndGggPiAwICYmIHRpbWVzWzBdIDw9IG5vdyAtIDEwMDApIHtcclxuICAgICAgICAgICAgICB0aW1lcy5zaGlmdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRpbWVzLnB1c2gobm93KTtcclxuICAgICAgICAgICAgZnBzID0gdGltZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICBmcHNEaXNwbGF5LnRleHRDb250ZW50ID0gXCJGUFM6IFwiICsgZnBzLnRvU3RyaW5nKCk7IFxyXG4gICAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShfbmFtZTogc3RyaW5nLCBfbWF0ZXJpYWw6IGYuTWF0ZXJpYWwsIF9tZXNoOiBmLk1lc2gpOiBmLk5vZGUge1xyXG4gICAgICBsZXQgbm9kZTogZi5Ob2RlID0gbmV3IGYuTm9kZShfbmFtZSk7XHJcbiAgICAgIGxldCBjbXBNZXNoOiBmLkNvbXBvbmVudE1lc2ggPSBuZXcgZi5Db21wb25lbnRNZXNoKF9tZXNoKTtcclxuICAgICAgbGV0IGNtcE1hdGVyaWFsOiBmLkNvbXBvbmVudE1hdGVyaWFsID0gbmV3IGYuQ29tcG9uZW50TWF0ZXJpYWwoX21hdGVyaWFsKTtcclxuICBcclxuICAgICAgbGV0IGNtcFRyYW5zZm9ybTogZi5Db21wb25lbnRUcmFuc2Zvcm0gPSBuZXcgZi5Db21wb25lbnRUcmFuc2Zvcm0oKTtcclxuICAgICAgbm9kZS5hZGRDb21wb25lbnQoY21wTWVzaCk7XHJcbiAgICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcE1hdGVyaWFsKTtcclxuICAgICAgbm9kZS5hZGRDb21wb25lbnQoY21wVHJhbnNmb3JtKTtcclxuICBcclxuICAgICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICAgIGZ1bmN0aW9uIGluaXRpYWxpemVQaHlzaWNzQm9keShfY21wVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybSwgZHluYW1pYzogYm9vbGVhbiwgbm86IG51bWJlcikge1xyXG5cclxuICAgIGJvZGllc1tub10gPSB3b3JsZC5hZGQoeyBcclxuICAgICAgdHlwZTogXCJib3hcIiwgLy8gdHlwZSBvZiBzaGFwZSA6IHNwaGVyZSwgYm94LCBjeWxpbmRlciBcclxuICAgICAgc2l6ZTogW19jbXBUcmFuc2Zvcm0ubG9jYWwuc2NhbGluZy54LCBfY21wVHJhbnNmb3JtLmxvY2FsLnNjYWxpbmcueSwgX2NtcFRyYW5zZm9ybS5sb2NhbC5zY2FsaW5nLnpdLCAvLyBzaXplIG9mIHNoYXBlXHJcbiAgICAgIHBvczogW19jbXBUcmFuc2Zvcm0ubG9jYWwudHJhbnNsYXRpb24ueCwgX2NtcFRyYW5zZm9ybS5sb2NhbC50cmFuc2xhdGlvbi55LCBfY21wVHJhbnNmb3JtLmxvY2FsLnRyYW5zbGF0aW9uLnpdLCAvLyBzdGFydCBwb3NpdGlvbiBpbiBkZWdyZWVcclxuICAgICAgcm90OiBbX2NtcFRyYW5zZm9ybS5sb2NhbC5yb3RhdGlvbi54LCBfY21wVHJhbnNmb3JtLmxvY2FsLnJvdGF0aW9uLnksIF9jbXBUcmFuc2Zvcm0ubG9jYWwucm90YXRpb24uel0sIC8vIHN0YXJ0IHJvdGF0aW9uIGluIGRlZ3JlZVxyXG4gICAgICBtb3ZlOiBkeW5hbWljLCAvLyBkeW5hbWljIG9yIHN0YXRpcXVlXHJcbiAgICAgIGRlbnNpdHk6IDEsXHJcbiAgICAgIGZyaWN0aW9uOiAwLjIsXHJcbiAgICAgIHJlc3RpdHV0aW9uOiAwLjIsXHJcbiAgICAgIGJlbG9uZ3NUbzogMSwgLy8gVGhlIGJpdHMgb2YgdGhlIGNvbGxpc2lvbiBncm91cHMgdG8gd2hpY2ggdGhlIHNoYXBlIGJlbG9uZ3MuXHJcbiAgICAgIGNvbGxpZGVzV2l0aDogMHhmZmZmZmZmZiAvLyBUaGUgYml0cyBvZiB0aGUgY29sbGlzaW9uIGdyb3VwcyB3aXRoIHdoaWNoIHRoZSBzaGFwZSBjb2xsaWRlcy5cclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgICBmdW5jdGlvbiBhcHBseVBoeXNpY3NCb2R5KF9jbXBUcmFuc2Zvcm06IGYuQ29tcG9uZW50VHJhbnNmb3JtLCBubzogbnVtYmVyKTogdm9pZCB7XHJcbiAgICAgIGxldCB0bXBQb3NpdGlvbjogZi5WZWN0b3IzID0gbmV3IGYuVmVjdG9yMyhib2RpZXNbbm9dLmdldFBvc2l0aW9uKCkueCwgYm9kaWVzW25vXS5nZXRQb3NpdGlvbigpLnksIGJvZGllc1tub10uZ2V0UG9zaXRpb24oKS56KTtcclxuICBcclxuICAgICAgbGV0IHRtcFJvdGF0aW9uOiBmLlZlY3RvcjM7IC8vPSBtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihib2RpZXNbbm9dLmdldFF1YXRlcm5pb24oKSk7IC8vLCBuZXcgZi5WZWN0b3IzKDAsIDAsIDEpKTsgLy9mLlZlY3RvcjMuT05FKDEpKTsgLy9fY21wVHJhbnNmb3JtLmxvY2FsLnJvdGF0aW9uKTtcclxuICAgICAgdG1wUm90YXRpb24gPSB0cmFuc2Zvcm1WZWN0b3JCeVF1YXRlcm5pb24oX2NtcFRyYW5zZm9ybS5sb2NhbC5yb3RhdGlvbiwgYm9kaWVzW25vXS5nZXRRdWF0ZXJuaW9uKCkpO1xyXG5cclxuXHJcbiAgICAgIGxldCB0bXBNYXRyaXg6IGYuTWF0cml4NHg0ID0gZi5NYXRyaXg0eDQuVFJBTlNMQVRJT04odG1wUG9zaXRpb24pO1xyXG4gICAgICBsZXQgdG1wUm90TWF0cml4OiBmLk1hdHJpeDR4NCA9IG5ldyBmLk1hdHJpeDR4NCgpO1xyXG4gICAgIC8vIGYuRGVidWcubG9nKHRtcFJvdGF0aW9uLngpO1xyXG4gICAgICB0bXBSb3RNYXRyaXgucm90YXRlWCh0bXBSb3RhdGlvbi54KTtcclxuICAgICAgdG1wUm90TWF0cml4LnJvdGF0ZVkodG1wUm90YXRpb24ueSk7XHJcbiAgICAgIHRtcFJvdE1hdHJpeC5yb3RhdGVaKHRtcFJvdGF0aW9uLnopO1xyXG4gICAgIC8vIGYuRGVidWcubG9nKHRtcFJvdE1hdHJpeCk7XHJcbiAgICAgIHRtcE1hdHJpeC5tdWx0aXBseSh0bXBSb3RNYXRyaXgpO1xyXG5cclxuICAgICAgX2NtcFRyYW5zZm9ybS5sb2NhbC5zZXQodG1wTWF0cml4KTtcclxuICAgICAgLy9fY21wVHJhbnNmb3JtLmxvY2FsLnJvdGF0ZSh0bXBSb3RhdGlvbiwgZmFsc2UpO1xyXG4gICAgICBcclxuICAgICAgLy9sZXQgY21wTWVzaDogZi5Db21wb25lbnRNZXNoID0gX2NtcFRyYW5zZm9ybS5nZXRDb250YWluZXIoKS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRNZXNoKTtcclxuICAgICAgLy9jbXBNZXNoLnBpdm90LnJvdGF0aW9uLnNldCh0bXBSb3RhdGlvbi54LCB0bXBSb3RhdGlvbi55LCB0bXBSb3RhdGlvbi56KTtcclxuICAgICAgLy9mLkRlYnVnLmxvZyh0bXBSb3RhdGlvbik7XHJcbiAgICB9XHJcblxyXG4gIFxyXG4gICAgZnVuY3Rpb24gbWFrZVJvdGF0aW9uRnJvbVF1YXRlcm5pb24oIHE6IGFueSwgdGFyZ2V0QXhpczogZi5WZWN0b3IzID0gbmV3IGYuVmVjdG9yMygxLCAxLCAxKSApOiBmLlZlY3RvcjMge1xyXG4gICAgICBsZXQgYW5nbGVzOiBmLlZlY3RvcjMgPSBuZXcgZi5WZWN0b3IzKCk7XHJcblxyXG4gICAgICAvLyByb2xsICh4LWF4aXMgcm90YXRpb24pXHJcbiAgICAgIGxldCBzaW5yX2Nvc3A6IG51bWJlciA9IDIgKiAocS53ICogcS54ICsgcS55ICogcS56KTtcclxuICAgICAgbGV0IGNvc3JfY29zcDogbnVtYmVyID0gMSAtIDIgKiAocS54ICogcS54ICsgcS55ICogcS55KTtcclxuICAgICAgYW5nbGVzLnggPSBNYXRoLmF0YW4yKHNpbnJfY29zcCwgY29zcl9jb3NwKTtcclxuICBcclxuICAgICAgLy8gcGl0Y2ggKHktYXhpcyByb3RhdGlvbilcclxuICAgICAgbGV0IHNpbnA6IG51bWJlciA9IDIgKiAocS53ICogcS55IC0gcS56ICogcS54KTtcclxuICAgICAgaWYgKE1hdGguYWJzKHNpbnApID49IDEpXHJcbiAgICAgICAgICBhbmdsZXMueSA9IGNvcHlzaWduKE1hdGguUEkgLyAyLCBzaW5wKTsgLy8gdXNlIDkwIGRlZ3JlZXMgaWYgb3V0IG9mIHJhbmdlXHJcbiAgICAgIGVsc2VcclxuICAgICAgICAgIGFuZ2xlcy55ID0gTWF0aC5hc2luKHNpbnApO1xyXG4gIFxyXG4gICAgICAvLyB5YXcgKHotYXhpcyByb3RhdGlvbilcclxuICAgICAgbGV0IHNpbnlfY29zcDogbnVtYmVyID0gMiAqIChxLncgKiBxLnogKyBxLnggKiBxLnkpO1xyXG4gICAgICBsZXQgY29zeV9jb3NwOiBudW1iZXIgPSAxIC0gMiAqIChxLnkgKiBxLnkgKyBxLnogKiBxLnopO1xyXG4gICAgICBhbmdsZXMueiA9IE1hdGguYXRhbjIoc2lueV9jb3NwLCBjb3N5X2Nvc3ApO1xyXG5cclxuICAgICAgcmV0dXJuIGFuZ2xlcztcclxuICB9XHJcblxyXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtVmVjdG9yQnlRdWF0ZXJuaW9uKHZhbHVlOiBmLlZlY3RvcjMsICByb3RhdGlvbjogYW55KTogZi5WZWN0b3IzIHtcclxuICAgICAgbGV0IGFuZ2xlczogZi5WZWN0b3IzO1xyXG5cclxuICAgICAgbGV0IHgyOiBudW1iZXIgPSByb3RhdGlvbi54ICsgcm90YXRpb24ueDtcclxuICAgICAgbGV0IHkyOiBudW1iZXIgPSByb3RhdGlvbi55ICsgcm90YXRpb24ueTtcclxuICAgICAgbGV0IHoyOiBudW1iZXIgPSByb3RhdGlvbi56ICsgcm90YXRpb24uejtcclxuIFxyXG4gICAgICBsZXQgd3gyOiBudW1iZXIgPSByb3RhdGlvbi53ICogeDI7XHJcbiAgICAgIGxldCB3eTI6IG51bWJlciA9IHJvdGF0aW9uLncgKiB5MjtcclxuICAgICAgbGV0IHd6MjogbnVtYmVyID0gcm90YXRpb24udyAqIHoyO1xyXG4gICAgICBsZXQgeHgyOiBudW1iZXIgPSByb3RhdGlvbi54ICogeDI7XHJcbiAgICAgIGxldCB4eTI6IG51bWJlciA9IHJvdGF0aW9uLnggKiB5MjtcclxuICAgICAgbGV0IHh6MjogbnVtYmVyID0gcm90YXRpb24ueCAqIHoyO1xyXG4gICAgICBsZXQgeXkyOiBudW1iZXIgPSByb3RhdGlvbi55ICogeTI7XHJcbiAgICAgIGxldCB5ejI6IG51bWJlciA9IHJvdGF0aW9uLnkgKiB6MjtcclxuICAgICAgbGV0IHp6MjogbnVtYmVyID0gcm90YXRpb24ueiAqIHoyO1xyXG5cclxuICAgICAgYW5nbGVzID0gbmV3IGYuVmVjdG9yMyhcclxuICAgICAgICAgICAgICB2YWx1ZS54ICogKDEuMCAtIHl5MiAtIHp6MikgKyB2YWx1ZS55ICogKHh5MiAtIHd6MikgKyB2YWx1ZS56ICogKHh6MiArIHd5MiksXHJcbiAgICAgICAgICAgICAgdmFsdWUueCAqICh4eTIgKyB3ejIpICsgdmFsdWUueSAqICgxLjAgLSB4eDIgLSB6ejIpICsgdmFsdWUueiAqICh5ejIgLSB3eDIpLFxyXG4gICAgICAgICAgICAgIHZhbHVlLnggKiAoeHoyIC0gd3kyKSArIHZhbHVlLnkgKiAoeXoyICsgd3gyKSArIHZhbHVlLnogKiAoMS4wIC0geHgyIC0geXkyKSk7XHJcbiAgICAgICAgIGYuRGVidWcubG9nKGFuZ2xlcyk7XHJcbiAgICAgIHJldHVybiBhbmdsZXM7XHJcbiAgICAgICAgfVxyXG4gXHJcbiAgICBmdW5jdGlvbiBjb3B5c2lnbihhOiBudW1iZXIsIGI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gYiA8IDAgPyAtTWF0aC5hYnMoYSkgOiBNYXRoLmFicyhhKTtcclxuICB9XHJcblxyXG59Il19