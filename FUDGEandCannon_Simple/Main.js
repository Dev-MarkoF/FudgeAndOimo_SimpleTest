"use strict";
///<reference types="./Libraries/FudgeCore.js"/>
///<reference types="./Libraries/cannon.min.js"/>
var FudgePhysics_Communication;
///<reference types="./Libraries/FudgeCore.js"/>
///<reference types="./Libraries/cannon.min.js"/>
(function (FudgePhysics_Communication) {
    var f = FudgeCore;
    window.addEventListener("load", init);
    const app = document.querySelector("canvas");
    let viewPort;
    let hierarchy;
    let fps;
    const times = [];
    let cubes = new Array();
    let fpsDisplay = document.querySelector("h2#FPS");
    let bodies = new Array();
    let world = new CANNON.World();
    function init(_event) {
        f.Debug.log(app);
        f.RenderManager.initialize();
        hierarchy = new f.Node("Scene");
        let ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube());
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.local.scale(new f.Vector3(10, 0.3, 10));
        hierarchy.appendChild(ground);
        cubes[0] = createCompleteMeshNode("Cube_1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform = cubes[0].getComponent(f.ComponentTransform);
        cmpCubeTransform.local.translate(new f.Vector3(0, 2, 0));
        cmpCubeTransform.local.rotateX(45);
        let cmpCubeMesh = cubes[0].getComponent(f.ComponentMesh);
        hierarchy.appendChild(cubes[0]);
        cubes[1] = createCompleteMeshNode("Cube_2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform2 = cubes[1].getComponent(f.ComponentTransform);
        cmpCubeTransform2.local.translate(new f.Vector3(0, 3.5, 0.4));
        hierarchy.appendChild(cubes[1]);
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        let cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(2, 2, 10));
        cmpCamera.pivot.lookAt(f.Vector3.ZERO());
        //Physics CANNON
        world.gravity = new CANNON.Vec3(0, -9.81, 0);
        initializePhysicsBody(ground.getComponent(f.ComponentTransform), 0, 0);
        initializePhysicsBody(cmpCubeTransform, 1, 1);
        initializePhysicsBody(cmpCubeTransform2, 1, 2);
        //EndPhysics
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Loop.start();
    }
    function update() {
        //Physics CANNON
        world.step(f.Loop.timeFrameGame / 1000);
        applyPhysicsBody(cubes[0].getComponent(f.ComponentTransform), 1);
        // applyPhysicsBody(cubes[1].getComponent(f.ComponentTransform), 2);
        //EndPhysics
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(() => {
            const now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function initializePhysicsBody(_cmpTransform, massVal, no) {
        let scale = new CANNON.Vec3(_cmpTransform.local.scaling.x / 1.5, _cmpTransform.local.scaling.y / 1.5, _cmpTransform.local.scaling.z / 1.5);
        let pos = new CANNON.Vec3(_cmpTransform.local.translation.x, _cmpTransform.local.translation.y, _cmpTransform.local.translation.z);
        let rotation = new CANNON.Quaternion();
        rotation.setFromEuler(_cmpTransform.local.rotation.x, _cmpTransform.local.rotation.y, _cmpTransform.local.rotation.z);
        bodies[no] = new CANNON.Body({
            mass: massVal,
            position: pos,
            shape: new CANNON.Box(scale)
        });
        world.addBody(bodies[no]);
    }
    function applyPhysicsBody(_cmpTransform, no) {
        let tmpPosition = new f.Vector3(bodies[no].position.x, bodies[no].position.y, bodies[no].position.z);
        let tmpRotation; // =  makeRotationFromQuaternion(bodies[no].quaternion); //, new f.Vector3(0, 0, 1)); //f.Vector3.ONE(1)); //_cmpTransform.local.rotation);
        tmpRotation = transformVectorByQuaternion(_cmpTransform.local.rotation, bodies[no].quaternion);
        f.Debug.log(tmpRotation);
        let tmpMatrix = f.Matrix4x4.TRANSLATION(tmpPosition);
        let tmpRotMatrix = new f.Matrix4x4();
        // f.Debug.log(tmpRotation.x);
        tmpRotMatrix.rotateY(tmpRotation.y);
        tmpRotMatrix.rotateX(tmpRotation.x);
        tmpRotMatrix.rotateZ(tmpRotation.z);
        // f.Debug.log(tmpRotMatrix);
        tmpMatrix.multiply(tmpRotMatrix);
        _cmpTransform.local.set(tmpMatrix);
        //_cmpTransform.local.rotate(tmpRotation);
        //f.Debug.log(_cmpTransform.local.rotation);
        let cmpMesh = _cmpTransform.getContainer().getComponent(f.ComponentMesh);
        //cmpMesh.pivot.rotate(tmpRotation);
        //f.Debug.log(cmpMesh.pivot.rotation);
    }
    function makeRotationFromQuaternion(q, targetAxis = new f.Vector3(1, 1, 1)) {
        let angles = new f.Vector3();
        // roll (x-axis rotation)
        let sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
        let cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
        angles.x = Math.atan2(sinr_cosp, cosr_cosp);
        // pitch (y-axis rotation)
        let sinp = 2 * (q.w * q.y - q.z * q.x);
        if (Math.abs(sinp) >= 1)
            angles.y = copysign(Math.PI / 2, sinp); // use 90 degrees if out of range
        else
            angles.y = Math.asin(sinp);
        // yaw (z-axis rotation)
        let siny_cosp = 2 * (q.w * q.z + q.x * q.y);
        let cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
        angles.z = Math.atan2(siny_cosp, cosy_cosp);
        //f.Debug.log(angles);
        return angles;
    }
    function transformVectorByQuaternion(value, rotation) {
        let angles;
        let x2 = rotation.x + rotation.x;
        let y2 = rotation.y + rotation.y;
        let z2 = rotation.z + rotation.z;
        let wx2 = rotation.w * x2;
        let wy2 = rotation.w * y2;
        let wz2 = rotation.w * z2;
        let xx2 = rotation.x * x2;
        let xy2 = rotation.x * y2;
        let xz2 = rotation.x * z2;
        let yy2 = rotation.y * y2;
        let yz2 = rotation.y * z2;
        let zz2 = rotation.z * z2;
        angles = new f.Vector3(value.x * (1.0 - yy2 - zz2) + value.y * (xy2 - wz2) + value.z * (xz2 + wy2), value.x * (xy2 + wz2) + value.y * (1.0 - xx2 - zz2) + value.z * (yz2 - wx2), value.x * (xz2 - wy2) + value.y * (yz2 + wx2) + value.z * (1.0 - xx2 - yy2));
        //f.Debug.log(angles);
        return angles;
    }
    function copysign(a, b) {
        return b < 0 ? -Math.abs(a) : Math.abs(a);
    }
    function Vec3ToQuaternion(rotation) {
        //  Roll first, about axis the object is facing, then
        //  pitch upward, then yaw to face into the new heading
        let yaw = rotation.y;
        let pitch = rotation.x;
        let roll = rotation.z;
        let sr, cr, sp, cp, sy, cy;
        let halfRoll = roll * 0.5;
        sr = Math.sin(halfRoll);
        cr = Math.cos(halfRoll);
        let halfPitch = pitch * 0.5;
        sp = Math.sin(halfPitch);
        cp = Math.cos(halfPitch);
        let halfYaw = yaw * 0.5;
        sy = Math.sin(halfYaw);
        cy = Math.cos(halfYaw);
        let result;
        result.X = cy * sp * cr + sy * cp * sr;
        result.Y = sy * cp * cr - cy * sp * sr;
        result.Z = cy * cp * sr - sy * sp * cr;
        result.W = cy * cp * cr + sy * sp * sr;
        return result;
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,